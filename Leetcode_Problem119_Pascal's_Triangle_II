/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* getRow(int rowIndex, int* returnSize){
    int* ans = calloc((rowIndex + 1) , sizeof(int));
    *returnSize = rowIndex + 1;
    ans[rowIndex] = 1;
    while(rowIndex > 0)
    {
        for( int j = rowIndex - 1 ; j < (*returnSize - 1) ; j++)
            ans[j] += ans[j+1];
        rowIndex--;
    }
    return ans;
}



---------------------------------------------------------------------------------------------------------------------


int * getRow(const int rowIdx,int * const pRetsLen){
	*pRetsLen = 1 + rowIdx;
	int* const rets = (int *)malloc(sizeof (int) * *pRetsLen);
	rets[0] = 1;
	for (int curRow = 1; curRow <= rowIdx; curRow += 1)
    {
		rets[curRow] = 1;
		for (int curCol = curRow - 1; curCol >= 1; curCol -= 1)
			rets[curCol] += rets[curCol - 1];
	}
	return rets;
}




-------------------------------------------------------------------------------------------------------------------------
/*Made my own function to compute the binomial coefficient. 
It works because I do some cancellation with the factorials before computing the binomial coefficient, 
however, this solution will not work for row index values that are much larger than the given constraint (33) due to overflow.*/

long double binom(int n, int k){
    long double fact = 1;
    if (k)
    {
        for (int i = n - k + 1; i <= n; i++) 
            fact *= i;
        for (int i = k; i > 1; i--) 
            fact /= i;
    }
    return fact;
}

int* getRow(int rowIndex, int* returnSize){
    *returnSize = rowIndex + 1;
    int end = ceil((*returnSize / 2.));
    int* row = (int*) malloc(sizeof(int) * (*returnSize));
    for (int i = 0; i < end; i++) 
    {
        row[i] = binom(rowIndex, i);
        row[(*returnSize) - (i + 1)] = row[i];
    }
    return row;
}




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* getRow(int rowIndex, int* returnSize){
    int* ret = (int*)malloc(sizeof(int)*(rowIndex+1));
    ret[0] = 1; // base case on top
    for (int i = 1; i < rowIndex + 1 ;i++)
    {
        ret[i] = 1; //sets last index of current row to 1
        int o = 1;
        for (int j = 1 ; j < i ; j++)//sum up "prev row" index j-1 and j and put in j -> index j original value needs to be saved
        {
            ret[j] = o + ret[j];
            o = ret[j] - o;
        }
    }
    *returnSize = rowIndex + 1;
    return ret;
}
